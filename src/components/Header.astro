---
import HeaderLink from "./HeaderLink.astro";
import Drawer from "./Drawer.astro";
import { SITE_TITLE, NAVIGATION } from "../consts";
---

<header
  class="fixed top-0 left-0 right-0 z-30 m-0 px-4 bg-white dark:bg-gray-900 shadow-lg border-b border-gray-200 dark:border-gray-700 transition-all duration-300"
>
  <nav class="flex items-center justify-between h-16 max-w-7xl mx-auto">
    <h2 class="m-0 text-base">
      <a
        href="/"
        class="no-underline text-gray-900 dark:text-gray-100 font-semibold hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-300"
      >
        {SITE_TITLE}
      </a>
    </h2>

    <div class="hidden md:flex items-center gap-4">
      {
        NAVIGATION.map(({ href, label }) => (
          <HeaderLink href={href}>{label}</HeaderLink>
        ))
      }
    </div>

    <div class="flex items-center gap-2">
      <!-- 移动端菜单按钮 -->
      <button
        id="mobile-menu-button"
        class="md:hidden bg-transparent border-2 border-gray-300 dark:border-gray-600 rounded-lg w-10 h-10 cursor-pointer flex items-center justify-center transition-all duration-300 text-gray-700 dark:text-gray-300 hover:border-blue-500 dark:hover:border-blue-400 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
        aria-label="打开菜单"
        aria-expanded="false"
      >
        <svg
          class="menu-icon w-5 h-5 stroke-current fill-none stroke-2"
          viewBox="0 0 24 24"
        >
          <line x1="3" y1="6" x2="21" y2="6"></line>
          <line x1="3" y1="12" x2="21" y2="12"></line>
          <line x1="3" y1="18" x2="21" y2="18"></line>
        </svg>
        <svg
          class="close-icon hidden w-5 h-5 stroke-current fill-none stroke-2"
          viewBox="0 0 24 24"
        >
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>

      <!-- 主题切换按钮 -->
      <button
        id="theme-toggle"
        class="bg-transparent border-2 border-gray-300 dark:border-gray-600 rounded-full w-10 h-10 cursor-pointer flex items-center justify-center transition-all duration-300 text-gray-700 dark:text-gray-300 hover:border-blue-500 dark:hover:border-blue-400 hover:bg-gray-100 dark:hover:bg-gray-800 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
        aria-label="切换主题"
      >
        <svg
          class="sun-icon hidden dark:block w-5 h-5 stroke-current fill-none stroke-2"
          viewBox="0 0 24 24"
        >
          <circle cx="12" cy="12" r="5"></circle>
          <line x1="12" y1="1" x2="12" y2="3"></line>
          <line x1="12" y1="21" x2="12" y2="23"></line>
          <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
          <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
          <line x1="1" y1="12" x2="3" y2="12"></line>
          <line x1="21" y1="12" x2="23" y2="12"></line>
          <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
          <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
        </svg>
        <svg
          class="moon-icon block dark:hidden w-5 h-5 stroke-current fill-none stroke-2"
          viewBox="0 0 24 24"
        >
          <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
        </svg>
      </button>

      <!-- 桌面端GitHub链接 -->
      <div class="hidden md:flex gap-2">
        <a
          href="https://github.com/SweetRetry/deep-tech-notes"
          target="_blank"
          class="flex items-center justify-center p-2 rounded-lg transition-all duration-300 hover:bg-gray-100 dark:hover:bg-gray-800 hover:-translate-y-0.5 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
        >
          <span class="sr-only">Go to Deep Tech Notes GitHub repo</span>
          <svg
            viewBox="0 0 16 16"
            aria-hidden="true"
            class="w-8 h-8 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-300"
          >
            <path
              fill="currentColor"
              d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"
            ></path>
          </svg>
        </a>
      </div>
    </div>
  </nav>
</header>

<!-- 移动端抽屉菜单 -->
<Drawer 
  id="mobile-menu" 
  position="right" 
  size="30rem" 
  maxSize="85vw" 
  class="md:hidden"
>
  <!-- 抽屉头部 -->
  <div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">
      {SITE_TITLE}
    </h3>
    <button
      id="drawer-close-button"
      class="p-2 rounded-lg text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-gray-700 dark:hover:text-gray-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
      aria-label="关闭菜单"
    >
      <svg class="w-5 h-5 stroke-current fill-none stroke-2" viewBox="0 0 24 24">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  </div>

  <!-- 抽屉内容 -->
  <div class="flex flex-col h-full">
    <!-- 导航菜单 -->
    <nav class="flex-1 px-4 py-6 space-y-2">
      {
        NAVIGATION.map(({ href, label }) => (
          <a
            href={href}
            class="flex items-center px-4 py-3 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-blue-600 dark:hover:text-blue-400 rounded-lg transition-all duration-200 font-medium group"
          >
            <span class="transition-transform duration-200 group-hover:-translate-x-1">
              {label}
            </span>
          </a>
        ))
      }
    </nav>

    <!-- 抽屉底部 -->
    <div class="px-4 py-4 border-t border-gray-200 dark:border-gray-700">
      <!-- GitHub链接 -->
      <a
        href="https://github.com/SweetRetry/deep-tech-notes"
        target="_blank"
        class="flex items-center px-4 py-3 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-blue-600 dark:hover:text-blue-400 rounded-lg transition-all duration-200 font-medium group"
      >
        <svg viewBox="0 0 16 16" aria-hidden="true" class="w-5 h-5 mr-3 flex-shrink-0">
          <path
            fill="currentColor"
            d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"
          ></path>
        </svg>
        <span class="transition-transform duration-200 group-hover:-translate-x-1">
          GitHub
        </span>
      </a>
    </div>
  </div>
</Drawer>

<script>
  // 移动端抽屉菜单控制 - 使用Drawer组件
  (function () {
    const DRAWER_ID = "mobile-menu";

    // 切换移动端抽屉菜单
    function toggleMobileMenu() {
      if (window.drawerManager) {
        window.drawerManager.toggle(DRAWER_ID);
        updateMenuButtonState();
      }
    }

    // 更新菜单按钮状态
    function updateMenuButtonState() {
      const menuButton = document.getElementById("mobile-menu-button");
      const menuIcon = menuButton?.querySelector(".menu-icon");
      const closeIcon = menuButton?.querySelector(".close-icon");

      if (!menuButton || !window.drawerManager) return;

      const isOpen = window.drawerManager.isOpen(DRAWER_ID);

      // 切换图标
      if (menuIcon && closeIcon) {
        if (isOpen) {
          menuIcon.classList.add("hidden");
          closeIcon.classList.remove("hidden");
        } else {
          menuIcon.classList.remove("hidden");
          closeIcon.classList.add("hidden");
        }
      }

      // 更新ARIA属性
      menuButton.setAttribute("aria-expanded", isOpen.toString());
      menuButton.setAttribute("aria-label", isOpen ? "关闭菜单" : "打开菜单");
    }

    // 点击菜单项后关闭抽屉
    function handleMenuItemClick() {
      if (window.drawerManager?.isOpen(DRAWER_ID)) {
        window.drawerManager.close(DRAWER_ID);
      }
    }

    // 初始化移动端抽屉菜单
    function initMobileMenu() {
      const menuButton = document.getElementById("mobile-menu-button");
      const drawerCloseButton = document.getElementById("drawer-close-button");
      const mobileMenu = document.getElementById("mobile-menu");

      // 菜单按钮点击事件
      if (menuButton) {
        menuButton.addEventListener("click", toggleMobileMenu);
      }

      // 抽屉关闭按钮点击事件
      if (drawerCloseButton) {
        drawerCloseButton.addEventListener("click", () => {
          if (window.drawerManager) {
            window.drawerManager.close(DRAWER_ID);
          }
        });
      }

      // 为菜单项添加点击事件
      if (mobileMenu) {
        const menuItems = mobileMenu.querySelectorAll("nav a, .px-4.py-4 a");
        menuItems.forEach((item) => {
          item.addEventListener("click", handleMenuItemClick);
        });
      }

      // 监听抽屉开关事件，更新按钮状态
      if (mobileMenu) {
        mobileMenu.addEventListener("drawer:open", updateMenuButtonState);
        mobileMenu.addEventListener("drawer:close", updateMenuButtonState);
      }

      // 处理窗口大小变化，在大屏幕时自动关闭抽屉
      window.addEventListener("resize", () => {
        if (window.innerWidth >= 768 && window.drawerManager?.isOpen(DRAWER_ID)) {
          window.drawerManager.close(DRAWER_ID);
        }
      });

      // 监听页面导航，关闭抽屉（兼容Astro客户端路由）
      document.addEventListener("astro:page-load", () => {
        if (window.drawerManager?.isOpen(DRAWER_ID)) {
          window.drawerManager.close(DRAWER_ID);
        }
      });

      // 为了兼容常规导航，也监听popstate事件
      window.addEventListener("popstate", () => {
        if (window.drawerManager?.isOpen(DRAWER_ID)) {
          window.drawerManager.close(DRAWER_ID);
        }
      });
    }

    // 确保DOM和DrawerManager都加载完成后执行
    function waitForDrawerManager() {
      if (window.drawerManager) {
        initMobileMenu();
      } else {
        // 如果DrawerManager还没有加载，等待一下再检查
        setTimeout(waitForDrawerManager, 50);
      }
    }

    // 确保DOM加载完成后执行
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", waitForDrawerManager);
    } else {
      waitForDrawerManager();
    }
  })();

  // 主题切换功能 - 简化版，主题初始化已在BaseHead中完成
  (function () {
    // 设置主题
    function setTheme(theme: string) {
      document.documentElement.setAttribute("data-theme", theme);
      try {
        localStorage.setItem("theme", theme);
      } catch {}
      updateToggleIcon(theme);
    }

    // 更新切换按钮图标
    function updateToggleIcon(theme: string) {
      const themeToggle = document.getElementById("theme-toggle");
      if (!themeToggle) return;

      const sunIcon = themeToggle.querySelector(".sun-icon") as HTMLElement;
      const moonIcon = themeToggle.querySelector(".moon-icon") as HTMLElement;

      if (theme === "dark") {
        if (sunIcon) {
          sunIcon.classList.remove("hidden");
          sunIcon.classList.add("block");
        }
        if (moonIcon) {
          moonIcon.classList.remove("block");
          moonIcon.classList.add("hidden");
        }
      } else {
        if (sunIcon) {
          sunIcon.classList.remove("block");
          sunIcon.classList.add("hidden");
        }
        if (moonIcon) {
          moonIcon.classList.remove("hidden");
          moonIcon.classList.add("block");
        }
      }
    }

    // 切换主题
    function toggleTheme() {
      const currentTheme =
        document.documentElement.getAttribute("data-theme") || "light";
      const newTheme = currentTheme === "light" ? "dark" : "light";
      setTheme(newTheme);
    }

    // 获取存储的主题
    function getStoredTheme() {
      try {
        return localStorage.getItem("theme");
      } catch {
        return null;
      }
    }

    // 获取系统主题
    function getSystemTheme() {
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }

    // 初始化 - 只需要设置图标和事件监听器
    function initHeader() {
      // 更新图标以匹配当前主题
      const currentTheme =
        document.documentElement.getAttribute("data-theme") || "light";
      updateToggleIcon(currentTheme);

      // 添加点击事件监听器
      const themeToggle = document.getElementById("theme-toggle");
      if (themeToggle) {
        themeToggle.removeEventListener("click", toggleTheme);
        themeToggle.addEventListener("click", toggleTheme);
      }

      // 监听系统主题变化
      const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
      mediaQuery.addEventListener("change", (e) => {
        if (!getStoredTheme()) {
          setTheme(e.matches ? "dark" : "light");
        }
      });
    }

    // 确保DOM加载完成后执行
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initHeader);
    } else {
      initHeader();
    }
  })();
</script>
